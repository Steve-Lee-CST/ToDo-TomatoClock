<Window x:Class="ToDoTomatoClock.Views.TomatoClockView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ToDoTomatoClock.Views"
        mc:Ignorable="d"
        Height="200" Width="320" 
        WindowStyle="None" AllowsTransparency="True" ResizeMode="NoResize" ShowInTaskbar="False"
        WindowStartupLocation="CenterScreen" Title="TomatoClockWindow" 
        MouseDown="Window_MouseDown"
        Background="{Binding GlobalBackground}" Topmost="{Binding TopMost}">
    <Window.DataContext>
        <vm:TomatoClockViewModel xmlns:vm="clr-namespace:ToDoTomatoClock.ViewModels" x:Name="VM"/>
    </Window.DataContext>
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TitleBarButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding ButtonStaticForeground}"/>
            <Setter Property="Foreground" Value="{Binding ButtonStaticForeground}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonStaticForeground}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonMouseOverForeground}"/>
                                <Setter Property="Foreground" Value="{Binding ButtonMouseOverForeground}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonPressedForeground}"/>
                                <Setter Property="Foreground" Value="{Binding ButtonPressedForeground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FuncBarButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding ButtonStaticForeground}"/>
            <Setter Property="Foreground" Value="{Binding ButtonStaticForeground}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Opacity" Value="{Binding ButtonStaticOpacity}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonStaticForeground}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>-->
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonMouseOverForeground}"/>
                                <Setter Property="Opacity" Value="{Binding ButtonMouseOverOpacity}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>-->
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding ButtonPressedForeground}"/>
                                <Setter Property="Opacity" Value="{Binding ButtonPressedOpacity}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <StackPanel>
        <StackPanel Height="25" 
                    Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Height="25" Width="25"
                    x:Name="ChangeThemeBtn"
                    Content="{Binding ThemeTag}"
                    Command="{Binding ChangeThemeCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Button Height="25" Width="25"
                    x:Name="TopMostBtn"
                    Background="{Binding TopMostIcon}"
                    Command="{Binding TopMostCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Button Height="25" Width="25"
                    x:Name="MinimizeBtn"
                    Background="{Binding MinimizeIcon}"
                    Command="{Binding MinimizeCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Button Height="25" Width="25"
                    x:Name="CloseBtn"
                    Background="{Binding CloseIcon}"
                    Command="{Binding CloseCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
        </StackPanel>
        <Label Height="140"
               HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
               Background="Transparent"
               Foreground="{Binding LabelForeground}"
               FontFamily="{Binding LabelFontFamily}"
               FontSize="{Binding LabelFontSize}"
               Content="{Binding CountdownStr}">
        </Label>
        <StackPanel Height="30" 
                    Orientation="Horizontal" HorizontalAlignment="Center">
            <Button Height="30" Width="30"
                    x:Name="StartBtn"
                    Background="{Binding StartIcon}"
                    Command="{Binding StartCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Grid Width="10"/>
            <Button Height="30" Width="30"
                    x:Name="PauseBtn" 
                    Background="{Binding PauseIcon}"
                    Command="{Binding PauseCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Grid Width="10"/>
            <Button Height="30" Width="30"
                    x:Name="ResetBtn" 
                    Background="{Binding ResetIcon}"
                    Command="{Binding ResetCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
            <Grid Width="10"/>
            <Button Height="30" Width="30"
                    x:Name="FinishBtn"
                    Background="{Binding NextIcon}"
                    Command="{Binding NextCmd}"
                    Style="{StaticResource FuncBarButtonStyle}"/>
        </StackPanel>
    </StackPanel>
</Window>
